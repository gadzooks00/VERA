classdef InflatableRender < handle & uix.Grid
    %INFLATABLERENDER Summary of this class goes here
    %   Detailed explanation goes here

    properties
        ElectrodeLocations
        
        InclusionRadius
        ShowColorBars
    end
    properties(Dependent)
        Inflation
    end
    properties(Access = protected)
        axModel
        sphere
        surface
        vSurf
        cInflationSlider
        cAlphaSlider
        vElectrodeSurface
        electrodeBrainLocation
        electrodeSphereLocation
        ElectrodeNames
        tElectrodeNames
    end
    
    methods
        function obj = InflatableRender(varargin)
            tmp_Grid=uix.Grid('Parent',obj);
            obj.InclusionRadius=6;
            obj.axModel=axes('Parent',uicontainer('Parent',tmp_Grid),'Units','normalized','Color','k','ActivePositionProperty', 'Position');

            sliderGrid=uix.Grid('Parent',obj);
            uicontrol('Parent',sliderGrid,'Style','text','String','Inflation');
            uicontrol('Parent',sliderGrid,'Style','text','String','Opacity');
            obj.cInflationSlider=uicontrol('Parent',sliderGrid,'Style','slider','Min',0,'Max',1,'Value',1);
            
            obj.cAlphaSlider=uicontrol('Parent',sliderGrid,'Style','slider','Min',0,'Max',1,'Value',1);
            sliderGrid.Widths=[60,-1];
            sliderGrid.Heights=[15,-1];
            addlistener(obj.cInflationSlider, 'Value', 'PostSet',@obj.updateInflation);
            addlistener(obj.cAlphaSlider, 'Value', 'PostSet',@obj.updateAlpha);
            obj.ShowColorBars=true;
            obj.Widths=[-1];
            obj.Heights=[-1, 30];
             try
                uix.set( obj, varargin{:} )
             catch e
                delete( obj )
                e.throwAsCaller()
             end

             
        end



        function SetElectrodeLocations(obj,val,names)
            obj.ElectrodeLocations=val;
            if(exist('names','var') && ~isempty(names))
                if(length(names) ~= size(val,1))
                    error('Number of channels and the channel names need to be the same');
                end
                obj.ElectrodeNames=names;
            else
                obj.ElectrodeNames={};
            end
            obj.updateELocs();
            obj.updateInflation(obj,0);
        end
        
        function set.Inflation(obj,val)
            if((val < 0) || (val > 1))
                error('Inflation value has to be between 0 and 1');
            end
            obj.cInflationSlider.Value=val;
        end

        function val= get.Inflation(obj)
            val=obj.cInflationSlider.Value;
        end


        function SetSurfaces(obj,surface, sphere)
            obj.surface=surface;
            obj.sphere=sphere;
            cla(obj.axModel);
            [annotation_remap,cmap,names,name_id]=createColormapFromAnnotations(obj.surface);
            obj.vSurf=plot3DModel(obj.axModel,obj.surface.Model,annotation_remap); 
            colormap(obj.axModel,cmap);
            if(obj.ShowColorBars)
                cb=colorbar(obj.axModel,'Ticks',name_id+0.5,'TickLabels',names,'FontSize',12,'location','east');
                %set(cb,'TickLabelInterpreter','none');
                obj.updateELocs();
                obj.updateInflation(obj,0);
            end
            
        end
    end

    methods (Access = protected)

        function updateELocs(obj)
            obj.clearElectrodesFromAxis();
            if(~isempty(obj.surface) && ~isempty(obj.sphere) && ~isempty(obj.ElectrodeLocations))
                elLocs=obj.ElectrodeLocations;
                [d,I]=min(pdist2(elLocs,obj.surface.Model.vert),[],2);
                Ie=1:length(I);
                if(~isempty(obj.InclusionRadius))
                    Ie=find(d < obj.InclusionRadius);
                    I=I(Ie);
                    
                end
                obj.electrodeBrainLocation=elLocs(Ie,:);
                obj.electrodeSphereLocation=obj.sphere.Model.vert(I,:);
                newEPos=(obj.cInflationSlider.Value)* obj.electrodeBrainLocation + (1-obj.cInflationSlider.Value)*obj.electrodeSphereLocation;
                hold(obj.axModel,'on');
                obj.vElectrodeSurface=scatter3(obj.axModel,newEPos(:,1),newEPos(:,2),newEPos(:,3),100,'filled','or','LineWidth',2,'MarkerEdgeColor','k');%plotBallsOnVolume(obj.axModel,newEPos,[],2);
                obj.tElectrodeNames={};
                if(~isempty(obj.ElectrodeNames))
                    for i=1:size(newEPos,1)
                        
                        obj.tElectrodeNames{i}=text(obj.axModel,newEPos(i,1),newEPos(i,2),newEPos(i,3),obj.ElectrodeNames{Ie(i)},'Interpreter','none');
                        hold(obj.axModel,'on');
                    end
                end
            
            end

        end
        function clearElectrodesFromAxis(obj)
            for i=1:length(obj.vElectrodeSurface)
                delete(obj.tElectrodeNames{i});
                delete(obj.vElectrodeSurface{i});
            end
        end

        function updateAlpha(obj,~,~)
            alpha(obj.vSurf,obj.cAlphaSlider.Value);

        end

        function updateInflation(obj,~,~)
            if(~isempty(obj.surface) && ~isempty(obj.sphere))
                newVerts=(obj.cInflationSlider.Value)*obj.surface.Model.vert + (1-obj.cInflationSlider.Value)*obj.sphere.Model.vert;
                obj.vSurf.Vertices=newVerts;
                
            end
            if(~isempty(obj.electrodeBrainLocation)) 
               newEPos=(obj.cInflationSlider.Value)* obj.electrodeBrainLocation + (1-obj.cInflationSlider.Value)*obj.electrodeSphereLocation;
               [X, Y, Z] = sphere(100);
               
               for i=1:length(obj.vElectrodeSurface)
                    %obj.vElectrodeSurface{i}.XData=2*X+newEPos(i,1);
                    %obj.vElectrodeSurface{i}.YData=2*Y+newEPos(i,2);
                    %obj.vElectrodeSurface{i}.ZData=2*Z+newEPos(i,3);
                    if(~isempty(obj.ElectrodeNames))
                        obj.tElectrodeNames{i}.Position=newEPos(i,:); %text(obj.axModel,newEPos(i,1),newEPos(i,2),newEPos(i,3),obj.ElectrodeNames{i});
                        
                    end
                    
               end
                

            end
        end
    end
end

